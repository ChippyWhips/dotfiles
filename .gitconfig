[alias]
	# history
	history = log --graph --date=short --pretty=format:'%Cred%h %Cgreen%ad%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	delete-merged = "!git branch --merged master | grep -v '\\*' | xargs -n 1 git branch -d"
	delete-merged-remote = "!git branch -r --merged origin/master | grep -v '>' | grep -v master | xargs -L1 | cut -d"/" -f2- | xargs git push origin --delete"

	dsf = "!f() { [ \"$GIT_PREFIX\" != \"\" ] && cd "$GIT_PREFIX"; git diff --color $@ | diff-so-fancy | less --tabs=1,5 -RFX; }; f"

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	editor = nano

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = /Users/tom/.gitignore_global
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	# whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false
	pager = less -x2

	# attempt to normalise line-endings, ref: codeschool
	#autocrlf = false

	# ref: https://help.github.com/articles/dealing-with-line-endings/#platform-all
	autocrlf = input

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions
	whitespace = red reverse

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[commit]
	template = ~/.gitmessage

[diff]
	# Detect copies as well as renames
	renames = copies

[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 10

[init]
	# hook templates
	templatedir = ~/.git-template

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]
	default = simple

[rebase]
	autosquash = true

[rerere]
	enabled = true

[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true

[user]
	name = Tom Marshall
	email = tommarshall7@gmail.com
